
class TrieNode{
    public:
    vector<TrieNode*> child;
    bool isword;
    TrieNode(){
        child.resize(26,NULL);
        isword = false;
    }
};

class Trie {
public:
    /** Initialize your data structure here. */
    TrieNode *root;  
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        TrieNode* temp = root;
        for(int i=0;i<word.size();i++){
            if(temp->child[word[i]-'a'] == NULL){
                temp->child[word[i]-'a'] = new TrieNode();
            }
            temp =  temp->child[word[i]-'a'];
        }
        temp->isword = true;
        
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
          TrieNode* temp = root;
        for(int i=0;i<word.size();i++){
            if(temp->child[word[i]-'a'] == NULL){
               return false;
            }
            temp =  temp->child[word[i]-'a'];
        }
        return temp->isword;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string word) {
         TrieNode* temp = root;
        for(int i=0;i<word.size();i++){
            if(temp->child[word[i]-'a'] == NULL){
               return false;
            }
            temp =  temp->child[word[i]-'a'];
        }
        return true;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */