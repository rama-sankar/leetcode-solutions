
class o{
         public:
        int x;
        int y;
        int level;
       
        o(int x1,int y1,int level1)
        {
            x = x1;
            y = y1;
           level = level1;
        }
    };
class Solution {
    
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<o> q;
        int n = grid.size();
     
        for(int i=0 ;i<grid.size();i++)
        {
         for(int j=0;j<grid[i].size();j++)
         {
           if(grid[i][j]==2)
           {
               q.push( o(i,j,0));
            
               
           }
         }
        }
        int time =0;
        while(!q.empty())
        {
           
              o cur = q.front();
                 q.pop();
           time = max(time,cur.level);
               if( cur.x-1>=0 && grid[cur.x-1][cur.y]==1)
               {
                 q.push( o(cur.x-1,cur.y,cur.level + 1));
                   grid[cur.x-1][cur.y]=2;
               }
               if( cur.x+1<grid.size() && grid[cur.x+1][cur.y]==1 )
               {
                 q.push(o(cur.x+1,cur.y,cur.level + 1));
                   grid[cur.x+1][cur.y]=2;
                  
               }
             if( cur.y-1>=0 && grid[cur.x][cur.y-1]==1 )
               {
                 q.push(o(cur.x,cur.y-1,cur.level + 1));
                   grid[cur.x][cur.y-1]=2;
                 
               }
             if( cur.y+1<grid[0].size() && grid[cur.x][cur.y+1]==1 )
               {
                 q.push(o(cur.x,cur.y+1,cur.level + 1));
                   grid[cur.x][cur.y+1]=2;
                 
               }
           
            
        }
        
         for(int i=0 ;i<grid.size();i++)
        {
         for(int j=0;j<grid[i].size();j++)
         {
           if(grid[i][j]==1)
           {
             return -1;
           }
         }
        }
        return time;
        
    }
};