class Solution {
public:
     vector<vector<int>> dp;
     vector<vector<int>> vis;
    int fun(int x,int y, vector<vector<int>> &A)
    {
       
        const int inf=1e8;
        if(x == A.size())return 0;
        if(y == -1 || y == A[0].size()) return inf;
        
    int ans=INT_MAX;
        if(vis[x][y]) return dp[x][y];
        ans= min(ans,A[x][y]+fun(x+1,y-1,A));
    
      ans= min(ans,A[x][y]+fun(x+1,y,A));
    
      ans= min(ans,A[x][y]+fun(x+1,y+1,A));
        dp[x][y]=ans;
     vis[x][y]=1;
     return ans;
        
        
    }
    
    
    
    
    
    
    int minFallingPathSum(vector<vector<int>>& A) {
        int rows = A.size();
        int col = A[0].size();
        int ans =INT_MAX;
        dp.resize(rows,vector<int>(col,INT_MAX));
        vis.resize(rows,vector<int>(col,0));
        for (int i=0;i<col;i++)
        {     
        ans = min(ans,fun(0,i,A));
            
            }
        return ans;
    }
};