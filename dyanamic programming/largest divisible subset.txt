class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        
        int n = nums.size();
        
        sort(nums.begin(),nums.end());
        vector<int> dp(n,1);
        
        int len=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<i;j++){
                if(nums[i]%nums[j] == 0){
                    dp[i] = max(dp[i],dp[j]+1);
                }
            }
            len=max(len,dp[i]); 
        }
        
        int prev = -1;
        vector<int> res;
        
        for(int i=nums.size()-1;i>=0;i--){
            if(dp[i]==len){
                if(prev==-1){
                    res.push_back(nums[i]);
                    prev=nums[i];len--;
                }else{
                    if(prev%nums[i]==0){
                         res.push_back(nums[i]);
                    prev=nums[i];len--;
                    }
                }
            }
        }
        
        return res;
        
    }
};