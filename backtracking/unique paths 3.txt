class Solution {
public:
    int fun(vector<vector<int>>& grid,int row,int col,vector<vector<bool>>& isvisited)
    {
     
     if(row<0 || row>=grid.size() || col <0||col>=grid[0].size())
         return 0;

     else if(  isvisited[row][col]==true ) return 0;
     else if(grid[row][col]==-1) return 0;
     else if(grid[row][col]==2)
     {
        
      isvisited[row][col]=true;
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[0].size();j++)
            { 
                if(grid[i][j]==-1) continue;
              if(isvisited[i][j]==false) { isvisited[row][col]=false;return 0;}  
            }
        }
             isvisited[row][col]=false;
         return 1;
     }
    
  
        else
        {
                isvisited[row][col]=true; 
            int max=0;
            
            max=max+fun(grid,row+1,col,isvisited);
             max=max+fun(grid,row-1,col,isvisited);
             max=max+fun(grid,row,col+1,isvisited);
             max=max+fun(grid,row,col-1,isvisited);
            isvisited[row][col]=false; 
            return  max;
        }
        
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        vector<vector<bool>> isvisited(grid.size(),vector<bool>(grid[0].size(),false));

        int row,col;
        for(int i=0;i<grid.size();i++)
        {
           for(int j=0;j<grid[0].size();j++)
           {
             if(grid[i][j]==1) 
             {
                 row=i;
                 col=j;
       
                 break;
             }
           }
        }
        return fun(grid,row,col,isvisited);
      }
    
};