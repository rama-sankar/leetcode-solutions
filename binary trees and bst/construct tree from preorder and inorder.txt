/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */



class Solution {
public:
    
    unordered_map<int,int> m;
    int count = 0;
    
    TreeNode* helper(vector<int>& preorder,vector<int>& inorder,int start,int end)
    {
        if(start>end) return NULL;
        TreeNode* newnode = new TreeNode(preorder[count]);
        count++;
        if(start == end) return newnode;
        int index = m[newnode->val];
        
        newnode->left = helper(preorder,inorder,start,index-1);
        newnode->right = helper(preorder,inorder,index+1,end);
        
        return newnode;
        
    }
        
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        
        for(int i=0;i<inorder.size();i++) m[inorder[i]] = i;
        return helper(preorder,inorder,0,inorder.size()-1);
        
    }
};