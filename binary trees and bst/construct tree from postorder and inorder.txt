/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int count = 0;
    map<int,int> m;
    
    TreeNode* helper(vector<int>& inorder,vector<int>& postorder,int start,int end){
        if(start>end) return NULL;
        TreeNode* newNode = new TreeNode(postorder[count]);
        //cout<<count;
        count--;
        if(start == end) return newNode;
        else{
           int index = m[newNode->val];
            
            newNode->right =  helper(inorder,postorder,index+1,end);
            newNode->left  = helper(inorder,postorder,start,index-1);
            
            return newNode;
        }
        
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int n=postorder.size();
        count = n-1;
        for(int i=0;i<n;i++) m[inorder[i]] = i;
        return helper(inorder,postorder,0,n-1);
    }
};