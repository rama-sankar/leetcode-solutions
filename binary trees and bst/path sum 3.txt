/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    void dfs(TreeNode* root,int cur_sum,int sum,map<int,int> m,int& res){
        if(root == NULL) return;
         cur_sum += root->val;
        auto itr = m.find(cur_sum-sum);
        if(itr!=m.end()) res+=itr->second;
        m[cur_sum]++;
        
       // cout<<cur_sum<<endl;
        
        dfs(root->left,cur_sum,sum,m,res);
         dfs(root->right,cur_sum,sum,m,res);
        
        
    }
    
    int pathSum(TreeNode* root, int sum) {
        
    map<int,int> m;
    int cur_sum = 0;
    int res = 0;
    m[0]=1;
    dfs(root,cur_sum,sum,m,res);
    return res;    
        
        
    }
};