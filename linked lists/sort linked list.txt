/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        
        if(head==NULL or head->next==NULL) return head;
        
        ListNode* temp = head;
        ListNode* slow = head;
        ListNode* fast = head;
        
        while(fast!=NULL and fast->next!=NULL){
           
            temp = slow;
            slow = slow->next;
             fast=fast->next->next;
        }
        
        temp->next = NULL;
        
        ListNode* left = sortList(head);
        ListNode* right = sortList(slow);
        
        return merge(left,right);
    }
    
    ListNode* merge(ListNode* l1 , ListNode* l2){
       
         ListNode* start = new ListNode(-1);
        ListNode* ans = start;
        
        while(l1 and l2){
            if(l1->val < l2->val){
                start->next  = l1;
                l1 = l1->next;
                start = start->next;
            }else{
                start->next  = l2;
                l2 = l2->next;
                start = start->next;; 
            }
        }
        
        if(l1!=NULL){
            start->next = l1;
        }else{
            start->next= l2;
        }
        
        return ans->next;
        
    }
};